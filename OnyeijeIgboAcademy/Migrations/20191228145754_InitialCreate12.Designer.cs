// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnyeijeIgboAcademy.DbContexts;

namespace OnyeijeIgboAcademy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191228145754_InitialCreate12")]
    partial class InitialCreate12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(6);

                    b.Property<bool>("Declaration");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(6);

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePics");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassId");

                    b.Property<int>("CourseId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("AssignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Meta")
                        .HasMaxLength(1000);

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("BlogId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<int>("CourseId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("StartDate");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("Cost");

                    b.Property<string>("CourseCode");

                    b.Property<string>("CoursePreviewUrl");

                    b.Property<string>("CourseTitle");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<int>("DifficultyLevelId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsFree");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("CourseId");

                    b.HasIndex("DifficultyLevelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.DifficultyLevels", b =>
                {
                    b.Property<int>("DifficultyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DifficultLevel");

                    b.HasKey("DifficultyLevelId");

                    b.ToTable("DifficultyLevels");

                    b.HasData(
                        new
                        {
                            DifficultyLevelId = 1,
                            DifficultLevel = "Beginner"
                        },
                        new
                        {
                            DifficultyLevelId = 2,
                            DifficultLevel = "Intermediate"
                        },
                        new
                        {
                            DifficultyLevelId = 3,
                            DifficultLevel = "Advanced"
                        });
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.ExamSetUp", b =>
                {
                    b.Property<int>("ExaminationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdmClassClassId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Id");

                    b.Property<string>("Instructions");

                    b.Property<bool>("IsActive");

                    b.Property<int>("QuestionNo");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("ExaminationId");

                    b.HasIndex("AdmClassClassId");

                    b.ToTable("ExamSetUp");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComfirmPassword");

                    b.Property<string>("Country");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("OtherNames");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("SurName")
                        .IsRequired();

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.InstructorCourse", b =>
                {
                    b.Property<int>("InstructorCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("InstructorId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("InstructorCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorCourse");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("ToUserId");

                    b.Property<string>("UserID");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Modules", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("ModuleCode");

                    b.Property<string>("Title");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.ONJQuestions", b =>
                {
                    b.Property<int>("ONJQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Format");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Questions");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("ONJQuestionsId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("ONJQuestions");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.QuestionChoices", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsAnswer");

                    b.Property<int>("ONJQuestionsId");

                    b.Property<string>("Text");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("AnswerId");

                    b.HasIndex("ONJQuestionsId");

                    b.ToTable("QuestionChoices");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Questions", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Course");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("Module");

                    b.Property<string>("Option1");

                    b.Property<string>("Option2");

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Question");

                    b.Property<string>("RightAnswer");

                    b.Property<int>("TopicId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("QuestId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attempted");

                    b.Property<int>("Correct");

                    b.Property<string>("Course");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("ExamName");

                    b.Property<int>("InCorrect");

                    b.Property<int>("NotAttempted");

                    b.Property<int>("Score");

                    b.Property<string>("StudentName");

                    b.Property<int>("TotalQuestions");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("ResultId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<DateTime?>("CompletedTime");

                    b.Property<string>("CourseCode");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<bool>("IsCompleted");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("StudentId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StAssignment");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StAssignmentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Choice");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Essay");

                    b.Property<int?>("ONJQuestionsId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("StudentId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("ONJQuestionsId");

                    b.HasIndex("StudentId");

                    b.ToTable("StAssignmentAnswer");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StCourseEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AmountPaid");

                    b.Property<int>("CourseId");

                    b.Property<DateTime?>("DateCompleted");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("EnrollmentDate");

                    b.Property<int>("StudentId");

                    b.Property<string>("TransId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StCourseEnrollment");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("Declaration");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("PhoneNumber");

                    b.Property<double>("Points");

                    b.Property<string>("ProfilePics");

                    b.Property<string>("State");

                    b.Property<string>("StudentEmail");

                    b.Property<string>("StudentFirstName");

                    b.Property<string>("StudentLastName");

                    b.Property<string>("StudentMiddleName");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StudentModules", b =>
                {
                    b.Property<int>("StudentModulesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedTime");

                    b.Property<bool>("IsCompleted");

                    b.Property<int>("ModuleId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("StudentId");

                    b.HasKey("StudentModulesId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentModules");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StudentTopic", b =>
                {
                    b.Property<int>("StudentTopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedTime");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsCompleted");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("StudentId");

                    b.Property<int>("TopicId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("StudentTopicId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TopicId");

                    b.ToTable("StudentTopic");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<float>("Duration");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Notes");

                    b.Property<int>("Position");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<string>("TopicNumber");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("VideoUrl");

                    b.HasKey("TopicId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.TopicFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FileName");

                    b.Property<int>("TopicId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicFiles");
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Transactions", b =>
                {
                    b.Property<int>("TransactionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount");

                    b.Property<string>("PayerEmail");

                    b.Property<string>("PaymentName");

                    b.Property<string>("PaymentStatus");

                    b.Property<string>("RefID");

                    b.HasKey("TransactionsId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Assignment", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Class")
                        .WithMany("Assignment")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Course", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Class", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Course", "Course")
                        .WithMany("Class")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Course", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.DifficultyLevels", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.ExamSetUp", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Class", "AdmClass")
                        .WithMany("ExamSetUp")
                        .HasForeignKey("AdmClassClassId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.InstructorCourse", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Course", "Courses")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Message", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Modules", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Course", "Courses")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.ONJQuestions", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Assignment", "Assignment")
                        .WithMany("ONJQuestions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.QuestionChoices", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.ONJQuestions", "ONJQuestions")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("ONJQuestionsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Questions", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StAssignment", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Assignment", "Assignment")
                        .WithMany("StAssignment")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Student", "Student")
                        .WithMany("StAssignment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StAssignmentAnswer", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.ONJQuestions", "ONJQuestions")
                        .WithMany("StAssignmentAnswer")
                        .HasForeignKey("ONJQuestionsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Student", "Student")
                        .WithMany("StAssignmentAnswer")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StCourseEnrollment", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Course", "Courses")
                        .WithMany("StCourseEnrollment")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Student", "Student")
                        .WithMany("StCourseEnrollment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StudentModules", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Modules", "Modules")
                        .WithMany("StudentModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Student", "Student")
                        .WithMany("StudentModules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.StudentTopic", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Student", "Student")
                        .WithMany("StudentTopics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnyeijeIgboAcademy.Models.Topic", "Topic")
                        .WithMany("StudentTopic")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.Topic", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Modules", "Modules")
                        .WithMany("Topics")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnyeijeIgboAcademy.Models.TopicFiles", b =>
                {
                    b.HasOne("OnyeijeIgboAcademy.Models.Topic", "Topic")
                        .WithMany("TopicFiles")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
